<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
        "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">

<svg width="100%" height="100%" version="1.1"
     xmlns="http://www.w3.org/2000/svg">

    <!--下面的命令可用于路径数据：-->
    <!--M = moveto ,需要两个参数，分别是需要移动到的点的x轴和y轴的坐标。类似于移动画笔的位置-->
    <!--L = lineto ,需要两个参数，分别是一个点的x轴和y轴坐标，L命令将会在当前位置和新位置（L前面画笔所在的点）之间画一条线段。-->
    <!--H = horizontal lineto ,绘制平行线-->
    <!--V = vertical lineto ,绘制垂直线,这两个命令都只带一个参数，标明在x轴或y轴移动到的位置，因为它们都只在坐标轴的一个方向上移动-->
    <!--C = curveto  ，三次贝塞尔曲线。(x,y)表示的是曲线的终点，(x1,y1)是起点的控制点，(x2,y2)是终点的控制点。控制点描述的是曲线起始点的斜率，曲线上各个点的斜率，是从起点斜率到终点斜率的渐变过程。C x1 y1, x2 y2, x y-->
    <!--S = smooth curveto ，当一个点某一侧的控制点是它另一侧的控制点的对称（以保持斜率不变），可以使用S命令，详情参考下面例子-->
    <!--Q = quadratic Belzier curve  ，二次贝塞尔曲线Q，只需要一个控制点，用来确定起点和终点的曲线斜率 ，详情参考下面例子-->
    <!--T = smooth quadratic Belzier curveto ，与S命令相似，是Q命令的简写命令。与S命令相似，T也会通过前一个控制点，推断出一个新的控制点。详情参考下面例子-->
    <!--A = elliptical Arc-->
    <!--Z = closepath ,闭合路径-->

    <!--path元素的形状是通过属性d定义的，属性d的值是一个“命令+参数”的序列。-->
    <!--因为属性d采用的是用户坐标系统，所以不需标明单位。-->
    <!--所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位。-->
    <!--定义了一条路径，它开始于位置 250 150，到达位置 150 350，然后从那里开始到 350 350，最后在 250 150 关闭路径。-->
    <path d="M250 150 L150 350 L350 350 Z" />


    <path d="M153 334
    C153 334 151 334 151 334
    C151 339 153 344 156 344
    C164 344 171 339 171 334
    C171 322 164 314 156 314
    C142 314 131 322 131 334
    C131 350 142 364 156 364
    C175 364 191 350 191 334
    C191 311 175 294 156 294
    C131 294 111 311 111 334
    C111 361 131 384 156 384
    C186 384 211 361 211 334
    C211 300 186 274 156 274" style="fill:yellow;stroke:red;stroke-width:2"/>

    <!--画的是一个矩形。-->
    <path d="M10 10 H 90 V 90 H 10 Z"/>

    <!--使用 C 来画弧线-->
    <path d="M10 10 C 20 20, 40 20, 50 10" stroke="black" fill="transparent"/>
    <path d="M70 10 C 70 20, 120 20, 120 10" stroke="black" fill="transparent"/>
    <path d="M130 10 C 120 20, 180 20, 170 10" stroke="black" fill="transparent"/>
    <path d="M10 60 C 20 80, 40 80, 50 60" stroke="black" fill="transparent"/>
    <path d="M70 60 C 70 80, 110 80, 110 60" stroke="black" fill="transparent"/>
    <path d="M130 60 C 120 80, 180 80, 170 60" stroke="black" fill="transparent"/>
    <path d="M10 110 C 20 140, 40 140, 50 110" stroke="black" fill="transparent"/>
    <path d="M70 110 C 70 140, 110 140, 110 110" stroke="black" fill="transparent"/>
    <path d="M130 110 C 120 140, 180 140, 170 110" stroke="black" fill="transparent"/>

    <!--使用 S 来画一段对称线-->
    <!--当一个点某一侧的控制点是它另一侧的控制点的对称（以保持斜率不变），可以使用S命令。简写的贝塞尔曲线命令。-->
    <!--如果S命令跟在一个C命令或者另一个S命令的后面，它的第一个控制点，就会被假设成前一个控制点的对称点。如果S命令单独使用，前面没有C命令或者另一个S命令，那么它的两个控制点就会被假设为同一个点。-->
    <path d="M10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80" stroke="black" fill="transparent"/>

    <!--使用 Q 来画一段曲线-->
    <!--二次贝塞尔曲线Q，只需要一个控制点，用来确定起点和终点的曲线斜率。因此它需要两组参数，控制点和终点坐标。Q x1 y1, x y-->
    <path d="M10 80 Q 95 10 180 80" stroke="black" fill="transparent"/>

    <!--使用 T 来画一段曲线-->
    <!--与S命令相似，是Q命令的简写命令，T也会通过前一个控制点，推断出一个新的控制点。这意味着，在你的第一个控制点后面，可以只定义终点，就创建出一个相当复杂的曲线。-->
    <path d="M10 80 Q 52.5 10, 95 80 T 180 80" stroke="black" fill="transparent"/>



</svg>